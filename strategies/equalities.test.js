import * as base from "./base.js";
import * as sudoku from "../sudoku.js";
import { eliminateFromEqualities } from "./equalities.js";
QUnit.module("strategies/equalities");
QUnit.test("eliminateFromEqualities", (assert) => {
    const settings = base.processSettings({
        equalities: [
            [
                [0, 0],
                [0, 1],
                [0, 2],
            ],
        ],
    });
    const board = sudoku.emptyBoard();
    board[0][0] = sudoku.bitMask(1) | sudoku.bitMask(2);
    board[0][1] = sudoku.bitMask(2) | sudoku.bitMask(3);
    const next = sudoku.clone(board);
    eliminateFromEqualities(settings, board, next);
    assert.equal(sudoku.dump(next, true), `\
[ 2       ][ 2       ][ 2       ] [123456789][123456789][123456789] [123456789][123456789][123456789]
[123456789][123456789][123456789] [123456789][123456789][123456789] [123456789][123456789][123456789]
[123456789][123456789][123456789] [123456789][123456789][123456789] [123456789][123456789][123456789]

[123456789][123456789][123456789] [123456789][123456789][123456789] [123456789][123456789][123456789]
[123456789][123456789][123456789] [123456789][123456789][123456789] [123456789][123456789][123456789]
[123456789][123456789][123456789] [123456789][123456789][123456789] [123456789][123456789][123456789]

[123456789][123456789][123456789] [123456789][123456789][123456789] [123456789][123456789][123456789]
[123456789][123456789][123456789] [123456789][123456789][123456789] [123456789][123456789][123456789]
[123456789][123456789][123456789] [123456789][123456789][123456789] [123456789][123456789][123456789]`);
});
