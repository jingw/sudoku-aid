import * as base from "./base.js";
import * as sudoku from "../sudoku.js";
import { eliminateFromBetweenLines } from "./between.js";

declare const QUnit: any;

QUnit.module("strategies/between");

QUnit.test("eliminate between lines known ends", (assert: any) => {
    const settings = base.processSettings({
        betweenLines: [[
            [0, 0],
            [0, 1],
            [0, 2],
            [0, 3],
        ]],
    });
    const board = sudoku.emptyBoard();
    board[0][0] = sudoku.bitMask(2) | sudoku.bitMask(3);
    board[0][3] = sudoku.bitMask(7) | sudoku.bitMask(8);
    const next = sudoku.clone(board);
    eliminateFromBetweenLines(settings, board, next);
    assert.equal(sudoku.dump(next, true), `\
[ 23      ][  34567  ][  34567  ] [      78 ][123456789][123456789] [123456789][123456789][123456789]
[123456789][123456789][123456789] [123456789][123456789][123456789] [123456789][123456789][123456789]
[123456789][123456789][123456789] [123456789][123456789][123456789] [123456789][123456789][123456789]

[123456789][123456789][123456789] [123456789][123456789][123456789] [123456789][123456789][123456789]
[123456789][123456789][123456789] [123456789][123456789][123456789] [123456789][123456789][123456789]
[123456789][123456789][123456789] [123456789][123456789][123456789] [123456789][123456789][123456789]

[123456789][123456789][123456789] [123456789][123456789][123456789] [123456789][123456789][123456789]
[123456789][123456789][123456789] [123456789][123456789][123456789] [123456789][123456789][123456789]
[123456789][123456789][123456789] [123456789][123456789][123456789] [123456789][123456789][123456789]`);
});

QUnit.test("eliminate between lines known middle", (assert: any) => {
    const settings = base.processSettings({
        betweenLines: [[
            [0, 0],
            [0, 1],
            [0, 2],
            [0, 3],
        ]],
    });
    const board = sudoku.emptyBoard();
    board[0][0] = sudoku.bitMask(1) | sudoku.bitMask(2);
    board[0][1] = sudoku.bitMask(5) | sudoku.bitMask(6);
    const next = sudoku.clone(board);
    eliminateFromBetweenLines(settings, board, next);
    assert.equal(sudoku.dump(next, true), `\
[12       ][    56   ][ 2345678 ] [     6789][123456789][123456789] [123456789][123456789][123456789]
[123456789][123456789][123456789] [123456789][123456789][123456789] [123456789][123456789][123456789]
[123456789][123456789][123456789] [123456789][123456789][123456789] [123456789][123456789][123456789]

[123456789][123456789][123456789] [123456789][123456789][123456789] [123456789][123456789][123456789]
[123456789][123456789][123456789] [123456789][123456789][123456789] [123456789][123456789][123456789]
[123456789][123456789][123456789] [123456789][123456789][123456789] [123456789][123456789][123456789]

[123456789][123456789][123456789] [123456789][123456789][123456789] [123456789][123456789][123456789]
[123456789][123456789][123456789] [123456789][123456789][123456789] [123456789][123456789][123456789]
[123456789][123456789][123456789] [123456789][123456789][123456789] [123456789][123456789][123456789]`);
});

QUnit.test("eliminate between lines excluded middle", (assert: any) => {
    const settings = base.processSettings({
        betweenLines: [[
            [0, 0],
            [0, 1],
            [0, 2],
            [0, 3],
        ]],
    });
    const board = sudoku.emptyBoard();
    board[0][1] = sudoku.bitMask(3) | sudoku.bitMask(4);
    board[0][2] = sudoku.bitMask(5) | sudoku.bitMask(6);
    const next = sudoku.clone(board);
    eliminateFromBetweenLines(settings, board, next);
    assert.equal(sudoku.dump(next, true), `\
[123  6789][  34     ][    56   ] [123  6789][123456789][123456789] [123456789][123456789][123456789]
[123456789][123456789][123456789] [123456789][123456789][123456789] [123456789][123456789][123456789]
[123456789][123456789][123456789] [123456789][123456789][123456789] [123456789][123456789][123456789]

[123456789][123456789][123456789] [123456789][123456789][123456789] [123456789][123456789][123456789]
[123456789][123456789][123456789] [123456789][123456789][123456789] [123456789][123456789][123456789]
[123456789][123456789][123456789] [123456789][123456789][123456789] [123456789][123456789][123456789]

[123456789][123456789][123456789] [123456789][123456789][123456789] [123456789][123456789][123456789]
[123456789][123456789][123456789] [123456789][123456789][123456789] [123456789][123456789][123456789]
[123456789][123456789][123456789] [123456789][123456789][123456789] [123456789][123456789][123456789]`);
});
